sign := avm &
  [ SYNSEM synsem,
    ARGS list,
    STEM list ].

predsort := *top*.
atom := predsort.
named_rel := predsort.

avm := *top*.

list := avm.

cons := list &
  [ FIRST *top*,
    REST list ].

null := list.

diff-list := avm &
  [ LIST list,
    LAST list ].

string := atom.

phrase-or-lexrule := sign &
  [ SYNSEM synsem &
    [ LOCAL.CONT.HOOK #hook ],
    C-CONT mrs & [ HOOK #hook] ].

word-or-lexrule := sign &
  [ ARG-ST list ].

phrase := phrase-or-lexrule.
lex-item := word-or-lexrule.

rule := sign &
  [ RULE-NAME string ].
tree-node-label := *top* &
  [ NODE sign ].
label := sign &
  [ LABEL-NAME string ].
meta := sign &
  [ META-PREFIX string,
    META-SUFFIX string ].

synsem := avm &
  [ LOCAL local ].
lex-synsem := synsem &
  [ LKEYS lexkeys ].

local := avm &
  [ CAT cat,
    CONT mrs ].

lexkeys := avm &
  [ KEYREL relation,
    ALTKEYREL relation ].

cat := avm &
  [ HEAD head,
    VAL valence ].

head := avm.
verb-or-noun := head.
verb := verb-or-noun.
noun := verb-or-noun.

valence := avm &
  [ SUBJ list,
    SPR list ].

mrs := avm &
  [ HOOK hook,
    RELS diff-list,
    HCONS diff-list ].

hook := avm &
  [ LTOP handle,
    INDEX individual,
    CLAUSE-KEY event ].

qeq := avm &
  [ HARG handle,
    LARG handle ].

semarg := avm &
  [ INSTLOC string ].

handle := semarg.
individual := semarg.
index := individual.
event-or-ref-index := individual.
ref-ind := index & event-or-ref-index.
event := event-or-ref-index.

relation := avm &
  [ LBL handle,
    WLINK list,
    PRED predsort ].

arg0-relation := relation &
  [ ARG0 individual ].

arg1-relation := arg0-relation &
  [ ARG1 semarg ].

event-relation := arg0-relation &
  [ ARG0 event ].

arg1-ev-relation := arg1-relation & event-relation.

noun-relation := arg0-relation &
  [ ARG0 ref-ind ].

noun-arg1-relation := noun-relation & arg1-relation.

named-relation := noun-relation &
  [ PRED named_rel,
    CARG string ].

quant-relation := arg0-relation &
  [ ARG0 ref-ind,
    RSTR handle,
    BODY handle ].

headed-phrase := phrase &
  [ SYNSEM.LOCAL.CAT.HEAD #head,
    HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD #head ].

binary-phrase := phrase &
  [ SYNSEM.LOCAL.CONT [ RELS [ LIST #first,
                               LAST #last ],
                        HCONS [ LIST #scfirst,
                                LAST #sclast ] ],
    C-CONT [ RELS [ LIST #middle2,
                    LAST #last ],
             HCONS [ LIST #scmiddle2,
                     LAST #sclast ] ],
    ARGS < [ SYNSEM.LOCAL.CONT [ RELS [ LIST #first,
                                        LAST #middle1 ],
                                 HCONS [ LIST #scfirst,
                                         LAST #scmiddle1 ] ] ],
           [ SYNSEM.LOCAL.CONT [ RELS [ LIST #middle1,
                                        LAST #middle2 ],
                                 HCONS [ LIST #scmiddle1,
                                         LAST #scmiddle2 ] ] ] > ].

binary-headed-phrase := headed-phrase & binary-phrase &
  [ NON-HEAD-DTR sign ].

head-final := binary-headed-phrase &
  [ HEAD-DTR #head,
    NON-HEAD-DTR #non-head,
    ARGS < #non-head, #head > ].

head-compositional := headed-phrase &
  [ C-CONT.HOOK #hook,
    HEAD-DTR.SYNSEM.LOCAL.CONT.HOOK #hook ].

norm-lex-item := lex-item &
  [ SYNSEM [ LOCAL.CONT [ HOOK [ LTOP #ltop,
                                 INDEX #index, ],
                          RELS <! #keyrel & relation !>,
                          HCONS <! !> ],
             LKEYS.KEYREL #keyrel & [ LBL #ltop,
                                      ARG0 #index ] ],
    ARG-ST < synsem > ].

subj-head-phrase := head-compositional & binary-headed-phrase & head-final &
  [ SYNSEM [ LOCAL.CAT.VAL [ SUBJ < >,
                             SPR < > ] ],
             HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < #synsem >,
                                             SPR < > ],
             NON-HEAD-DTR.SYNSEM #synsem &
               [ LOCAL.CAT.VAL [ SUBJ < >,
                                 SPR < > ] ],
             C-CONT [ RELS <! !>, HCONS <! !> ] ].

intransitive-verb-lex := norm-lex-item &
  [ ARG-ST < [ LOCAL [ CAT.HEAD verb,
                       CONT.HOOK.INDEX ref-ind & #ind ] ] >,
    SYNSEM.LKEYS.KEYREL event-relation & [ ARG1 #ind ] ].

noun-lex := norm-lex-item &
  [ SYNSEM [ LOCAL.CAT [ HEAD noun,
                         VAL.SUBJ < > ],
             LKEYS.KEYREL noun-relation ] ].
